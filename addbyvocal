// File: components/VoicePropertyAdder.jsx
import React, { useState, useEffect } from 'react';

const VoicePropertyAdder = () => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [propertyData, setPropertyData] = useState(null);
  const [recognition, setRecognition] = useState(null);
  
  useEffect(() => {
    // Inizializza il riconoscimento vocale
    if ('webkitSpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      recognitionInstance.continuous = false;
      recognitionInstance.interimResults = true;
      recognitionInstance.lang = 'it-IT';
      
      recognitionInstance.onresult = (event) => {
        const transcriptResult = Array.from(event.results)
          .map(result => result[0])
          .map(result => result.transcript)
          .join('');
        setTranscript(transcriptResult);
        
        // Analizza il testo e crea la proprietà
        parseVoiceInput(transcriptResult);
      };
      
      recognitionInstance.onerror = (event) => {
        console.error('Errore nel riconoscimento vocale:', event.error);
        setIsListening(false);
      };
      
      recognitionInstance.onend = () => {
        setIsListening(false);
      };
      
      setRecognition(recognitionInstance);
    }
  }, []);
  
  const startListening = () => {
    if (recognition) {
      setTranscript('');
      setPropertyData(null);
      setIsListening(true);
      recognition.start();
    }
  };
  
  const stopListening = () => {
    if (recognition) {
      setIsListening(false);
      recognition.stop();
    }
  };
  
  const parseVoiceInput = (text) => {
    // Analizza il testo vocale e crea la proprietà
    const property = {
      id: `voice-${Date.now()}`,
      title: extractTitleFromText(text),
      price: extractPriceFromText(text),
      location: extractLocationFromText(text) || "Sanya, Hainan",
      bedrooms: extractBedroomsFromText(text),
      bathrooms: extractBathroomsFromText(text),
      size: extractSizeFromText(text),
      type: extractTypeFromText(text),
      image: generatePlaceholderImage(),
      description: text,
      features: extractFeaturesFromText(text),
      views: 0,
      published: "Adesso"
    };
    
    setPropertyData(property);
  };
  
  const extractTitleFromText = (text) => {
    const titleKeywords = ['villa', 'appartamento', 'attico', 'casa', 'proprietà'];
    const words = text.split(' ');
    const titleWords = words.filter(word => 
      titleKeywords.some(keyword => word.toLowerCase().includes(keyword))
    );
    
    return titleWords.length > 0 
      ? titleWords.join(' ').charAt(0).toUpperCase() + titleWords.join(' ').slice(1)
      : "Proprietà Aggiunta Vocalmente";
  };
  
  const extractPriceFromText = (text) => {
    const priceMatch = text.match(/(\d+(?:\.\d+)?(?:\,\d+)?)/g);
    return priceMatch ? parseInt(priceMatch[0].replace(/\./g, '').replace(',', '')) * 1000 : 500000;
  };
  
  const extractLocationFromText = (text) => {
    const locations = ['sanya', 'milano', 'roma', 'firenze', 'napoli', 'torino'];
    const foundLocation = locations.find(loc => text.toLowerCase().includes(loc));
    return foundLocation ? foundLocation.charAt(0).toUpperCase() + foundLocation.slice(1) : null;
  };
  
  const extractBedroomsFromText = (text) => {
    const bedroomMatch = text.match(/(\d+)\s*(?:camera|camere|stanza|stanze)/i);
    return bedroomMatch ? parseInt(bedroomMatch[1]) : 2;
  };
  
  const extractBathroomsFromText = (text) => {
    const bathroomMatch = text.match(/(\d+)\s*(?:bagno|bagni)/i);
    return bathroomMatch ? parseInt(bathroomMatch[1]) : 1;
  };
  
  const extractSizeFromText = (text) => {
    const sizeMatch = text.match(/(\d+)\s*(?:mq|metri)/i);
    return sizeMatch ? parseInt(sizeMatch[1]) : 100;
  };
  
  const extractTypeFromText = (text) => {
    const types = ['appartamento', 'villa', 'attico', 'casa'];
    const foundType = types.find(type => text.toLowerCase().includes(type));
    return foundType ? foundType.charAt(0).toUpperCase() + foundType.slice(1) : "Appartamento";
  };
  
  const extractFeaturesFromText = (text) => {
    const allFeatures = ['ascensore', 'cantina', 'aria condizionata', 'terrazzo', 'giardino', 'piscina', 'garage'];
    return allFeatures.filter(feature => text.toLowerCase().includes(feature));
  };
  
  const generatePlaceholderImage = () => {
    const colors = ['4f46e5', '059669', 'dc2626', '7c3aed', '0891b2'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    return `https://placehold.co/400x300/${randomColor}/ffffff?text=Property+${Date.now()}`;
  };
  
  const saveProperty = async () => {
    if (propertyData) {
      // In una versione reale, questo salverebbe nel database
      console.log('Proprietà salvata:', propertyData);
      alert('Proprietà salvata con successo!');
      setPropertyData(null);
      setTranscript('');
    }
  };
  
  return (
    <div className="bg-white rounded-2xl shadow-lg p-6 mb-8">
      <h3 className="text-xl font-bold text-gray-900 mb-4">Aggiungi Proprietà Vocalmente</h3>
      
      <div className="text-center mb-6">
        <button
          onClick={isListening ? stopListening : startListening}
          className={`w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-4 transition-colors ${
            isListening 
              ? 'bg-red-500 hover:bg-red-600' 
              : 'bg-blue-500 hover:bg-blue-600'
          }`}
        >
          <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m8 0h4M9 11a3 3 0 116 0v4a3 3 0 01-6 0v-4z" />
          </svg>
        </button>
        
        <p className="text-gray-600 mb-4">
          {isListening ? 'Sto ascoltando...' : 'Clicca per aggiungere una proprietà vocalmente'}
        </p>
        
        {transcript && (
          <div className="bg-gray-50 rounded-lg p-4 mb-4">
            <p className="text-gray-700">{transcript}</p>
          </div>
        )}
      </div>
      
      {propertyData && (
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6">
          <h4 className="text-lg font-bold text-gray-900 mb-4">Proprietà Riconosciuta</h4>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <img
                src={propertyData.image}
                alt={propertyData.title}
                className="w-full h-48 object-cover rounded-lg mb-4"
              />
            </div>
            
            <div>
              <h5 className="text-xl font-bold text-gray-900 mb-2">{propertyData.title}</h5>
              <p className="text-gray-600 mb-2">{propertyData.location}</p>
              <p className="text-2xl font-bold text-blue-600 mb-4">{formatPrice(propertyData.price)}</p>
              
              <div className="grid grid-cols-3 gap-2 mb-4">
                <div className="text-center">
                  <div className="text-lg font-bold text-gray-900">{propertyData.bedrooms}</div>
                  <div className="text-xs text-gray-600">Camere</div>
                </div>
                <div className="text-center">
                  <div className="text-lg font-bold text-gray-900">{propertyData.bathrooms}</div>
                  <div className="text-xs text-gray-600">Bagni</div>
                </div>
                <div className="text-center">
                  <div className="text-lg font-bold text-gray-900">{propertyData.size}</div>
                  <div className="text-xs text-gray-600">mq</div>
                </div>
              </div>
              
              <div className="flex flex-wrap gap-2 mb-4">
                {propertyData.features.map((feature, index) => (
                  <span key={index} className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs">
                    {feature}
                  </span>
                ))}
              </div>
            </div>
          </div>
          
          <button
            onClick={saveProperty}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-300"
          >
            Salva Proprietà
          </button>
        </div>
      )}
    </div>
  );
};

export default VoicePropertyAdder;